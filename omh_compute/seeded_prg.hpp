#ifndef __SEEDED_PRG_H__
#define __SEEDED_PRG_H__

#include <fstream>
#include <sstream>
#include <memory>
#include <random>
#include <algorithm>
#include <array>
#include <functional>

template<typename EngineT = typename std::mt19937_64, std::size_t StateSize = EngineT::state_size>
class LongSeed {

  using                 engine_type    = typename EngineT::result_type;
  using                 device_type    = std::random_device::result_type;
  using                 seedseq_type   = std::seed_seq::result_type;
  constexpr static auto bytes_needed   = StateSize * sizeof(engine_type);
  constexpr static auto numbers_needed = (sizeof(device_type) < sizeof(seedseq_type))
    ? (bytes_needed / sizeof(device_type))
    : (bytes_needed / sizeof(seedseq_type));

  std::array<device_type, numbers_needed> numbers;

  const char* defaultseed =
    "75261377 4270200753 4189882177 785322710 3461882109 2982594601"
    "1988382727 392802909 2377775101 1840377460 1436754065 4210842162"
    "2456666917 446541681 826331486 2802524991 1154674118 3976381787"
    "1583095960 1359811581 3937759631 1792684578 1328424263 2730057002"
    "529395100 2769461469 2216109803 377791366 1455112557 3902637197"
    "3861116142 30684814 2360415217 2062266922 1913871924 3977133897"
    "3826884050 2065666463 775333905 1906065262 1400782047 3982961386"
    "3361694921 4033473869 2450225136 4185096762 4158215881 3803906494"
    "2564344740 1814772753 240361162 968841392 2799524020 3317791104"
    "3969439935 3771661627 1406055057 1969075632 2847757553 1623952053"
    "2090594829 4112576738 1979020329 2285018577 2405173326 938933551"
    "1086731023 3357755667 297840387 2695039894 3627557629 3334866095"
    "3196629774 2327873523 1381796035 571409924 3759281232 2257774308"
    "680104232 3179401626 3459288065 3402677502 1965627400 3810287731"
    "2887409371 9716051 1244868148 714211015 338990937 2490277564 760888296"
    "565031095 3880909593 2155451842 1395259119 2921300894 1027387941"
    "2449201044 885528694 3287037255 2492409304 1148121369 177847177"
    "1647271496 3864586000 1809809588 1305659693 1823187614 275516101"
    "467866309 2620380886 961464725 233133210 2395799069 2080678659"
    "2274175825 4004552538 2859070013 2404993272 3538044383 239379615"
    "708159099 153410570 590549348 1483859431 2946439022 1725129569"
    "1362214319 3811525428 1347585851 4030930817 1138460478 3911369228"
    "1422319683 4272510890 223145932 2154693328 389280322 1104400873"
    "743565596 4216053158 1563677031 1233804985 629178822 2940133584"
    "1988394631 337083969 655404376 4268230416 59905978 1005453339"
    "2781409990 3535753426 37580443 841034065 3742574194 3716988248"
    "781857763 2204272779 621540198 422312938 2486474774 703252837"
    "1233298245 1163330665 502392891 3376341949 2034514039 4080378157"
    "414695201 130525687 2794241896 2022959136 2956434939 3424552953"
    "2779452522 1089354404 1419223259 1390400862 3027445615 4004504599"
    "3481775506 1038840438 2979411241 2344975809 3827957710 2787905530"
    "3461963842 3494414752 263750347 1092029420 309386528 1972271410"
    "1953257713 800919247 2560526310 127310971 2402546702 276894397"
    "2161695687 1672608759 3245539473 305650785 2358411550 3249085011"
    "1836752452 3223718426 2887093656 4245824959 2506736056 2085840185"
    "2970352504 2180480108 2514379021 660055697 4142753961 515148831"
    "1887547613 1165067387 2597082306 2500298230 4075473770 3388975973"
    "2176821685 1942501250 2828314136 2453864678 3788106932 213536502"
    "3010210364 1212789381 499774219 2960905920 1918170410 901419223"
    "2939706507 1263959316 3313123112 2979437445 2767809133 2104240878"
    "2197880376 2765009812 449846691 4174383334 3608572728 3059711076"
    "3952674271 2254515707 563743562 4157392273 1385545434 860311975"
    "713537938 684293435 564479392 394297849 200219408 2571873517"
    "3722647359 1995796296 3012778993 1630683533 3067969244 407296492"
    "1075981605 1161756520 2366611346 3122778267 1217681099 1150772301"
    "3292967152 2365760100 128369230 3401806430 802684662 4224972794"
    "3696296177 3922966843 3292003767 3922591074 3436115371 2587546733"
    "4032687489 536598490 2588632724 3517218517 14780006 4270098059"
    "4068014767 530231193 4157504677 2519257167 3532578184 3702920985"
    "433239668 3737948848 3399901905 888816766 3864719652 3784076964"
    "2266158823 3993392148 1010524993 455271374 2347645150 1097683524"
    "2304852532 1557432042 3372901552 2995403055 4187509829 759976983"
    "4068964713 377707638 4008132958 597844761 3547662092 1671911712"
    "803867462 4074062111 3848880686 24465995 3556881959 1233249405"
    "2910817451 163261449 658966742 1140743763 337317250 1474610637"
    "1871057138 180580617 429353638 3900194041 1634032764 3653939801"
    "633183964 80740391 175854378 885219018 4205222386 3567009797"
    "1641978378 2842495307 1259619605 3916047194 315093113 3942255410"
    "3789329131 1336476642 4212996692 3881689348 938043495 2201991528"
    "1419225430 994616515 2888049776 479649098 815160035 1711483265"
    "3144005070 1334776011 1051229156 1557961287 480985425 3765874238"
    "2906449637 2979422537 2590212631 1686648068 1318504315 1389720047"
    "707193754 316287260 2095896795 3343886054 781333841 4047956339"
    "3964462570 1660975948 54305768 3538404583 3039127772 2491455402"
    "4094463763 2092791275 674184227 3176570334 2077278986 3651325686"
    "1481725305 538762652 1633387040 3321741052 1989041344 4031213452"
    "3742396790 641064099 1659139554 1986151472 3978679023 3009722425"
    "1456466516 3153766441 4176250636 922158289 4175677497 216390830"
    "653698427 1135758504 2234254138 4019469330 1113963057 404676035"
    "2055317870 3352167794 3890753132 1213099523 503650881 1246827763"
    "2121016920 2215016913 3544632562 2616299917 2575658438 4230707475"
    "1117544547 500036585 1692280915 3015627500 418904151 271112631"
    "2477146879 2524197924 666633524 57229790 2432797838 2018335917"
    "2023401000 1069349197 1440459677 560138430 3188828616 1285083551"
    "3806908639 1528560364 2339161268 4253446845 3508938100 1376999872"
    "3796505219 1398339822 1928511928 3352014179 158558721 2940347495"
    "2221066635 2383864572 641384921 926564784 1989792072 2734604272"
    "3679227462 2245490890 2501616409 462551848 2496063180 3956829885"
    "2525760775 2043559144 1860026585 3348838964 753222434 2148046132"
    "2276275358 1576221863 645080418 4214395465 749875447 1845456418"
    "2143026485 1538438929 3522539065 1424320166 671483338 404259388"
    "596252069 1637402833 1431180912 3669762156 3185705401 810213225"
    "2142620292 1715887259 2049886015 4241314162 1258703795 4246651964"
    "1393186582 4134582546 249814890 3209590558 2883396718 2657466684"
    "1704359072 1348349083 1696280539 3167269402 706486698 1666182791"
    "2153182504 1275801591 1521610666 2000879917 3648827668 2271379019"
    "4243531213 1413301545 3952881105 236991116 3655364670 305349316"
    "2800589359 3894110800 514230170 1707075739 3154424914 931164046"
    "1394169728 1108569800 1224698097 510359833 387389281 4084475148"
    "1154454904 3673203124 4178417334 140137923 968149536 2321806228"
    "636420613 626510221 2038484749 1659879488 692204740 2364888383"
    "1969980920 1089130718 1027517960 3291184636 1216052873 4021059601"
    "79654408 2462112716 2815195411 2123452575 393869427 4270902960"
    "2263582441 110735239 1691938177 2750898420 3756412179 1446555175"
    "881608572 3826125394 3792217474 3124955136 3206072338 3006383517"
    "1696415254 2606262532 2483963373 2891475299 3293786567 3694711434"
    "2263695784 693950187 1901023397 3172062429 1673081368 4153913724"
    "2897612013 3778875722 3213928350 3425546325 189620884 2959949524"
    "3038721846 2928567715 2662193958 342310208 1647939181 4191503663"
    "908781369 1110124237 3909880855 465859085 2942833530 3908037081"
    "2530524557 2361818918 598844243 2449030367 1235566111 2253836357"
    "796239428 353292005 2168106499 2708854970 1605064076 3633173857"
    "1361095767 294499498 1078237517 3275285177 3593248973 2756912497"
    "835400736 3626421463 893294034 1617112479 3138606539";

public:
  typedef EngineT type;

  LongSeed(const char* save = nullptr, const char* load = nullptr, bool new_random = true) {
    if(load || !new_random) {
      std::unique_ptr<std::istream> is(load ? (std::istream*)(new std::ifstream(load)) : (std::istream*)(new std::istringstream(defaultseed)));
      size_t i = 0;
      for( ; *is && i < numbers_needed; ++i)
        *is >> numbers[i];
      if(i != numbers_needed)
        std::runtime_error(std::string("Failed loading seed from '") + (load ? load : "default seed") + "'");
    } else {
      std::random_device rnddev {};
      std::generate(numbers.begin(), numbers.end(), std::ref(rnddev));
    }

    if(save) {
      std::ofstream os(save);
      for(size_t i = 0; i < numbers_needed; ++i)
        os << numbers[i] << '\n';
      if(!os.good())
        throw std::runtime_error(std::string("Failed writing seed to '") + save + "'");
    }
  }

  void seed(EngineT& engine) {
    std::seed_seq seedseq(numbers.cbegin(), numbers.cend());
    engine.seed(seedseq);
  }
  inline void operator()(EngineT& engine) { seed(engine); }

  EngineT seeded() {
    EngineT res;
    seed(res);
    return res;
  }
};

#endif /* __SEEDED_PRG_H__ */
